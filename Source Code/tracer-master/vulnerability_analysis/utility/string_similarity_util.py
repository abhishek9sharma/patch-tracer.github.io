#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
-----------------------------------------
@Created: 2020/09/14
------------------------------------------
@Modify: 2020/09/14
------------------------------------------
@Description:

实现多种 string 相似度计算算法
"""
import difflib
import Levenshtein

def CHAR_diff_lib1(str1, str2):
    # 1. difflib
    seq = difflib.SequenceMatcher(None, str1, str2)
    ratio = seq.ratio()
    # print('difflib similarity1: ', ratio)
    return ratio

# def CHAR_diff_lib2(str1, str2):
#     # difflib 去掉列表中不需要比较的字符
#     seq = difflib.SequenceMatcher(lambda x: x in ' 我的雪', str1, str2)
#     ratio = seq.ratio()
#     print('difflib similarity2: ', ratio)

# def CHAR_Levenshtein_hamming(str1, str2):
#     # 2. hamming距离，str1和str2长度必须一致，描述两个等长字串之间对应位置上不同字符的个数
#     sim = Levenshtein.hamming(str1, str2)
#     print( 'hamming similarity: ', sim)

def CHAR_Levenshtein_distance(str1, str2):
    # 3. 编辑距离，描述由一个字串转化成另一个字串最少的操作次数，在其中的操作包括 插入、删除、替换
    sim = Levenshtein.distance(str1, str2)
    # print('Levenshtein similarity: ', sim)
    # print( 1 - sim / (len(str1) if len(str1)>len(str2) else len(str2)) )
    ratio = 1 - sim / (len(str1) if len(str1)>len(str2) else len(str2))
    return ratio

def CHAR_Levenshtein_ratio(str1, str2):
    # 4.计算莱文斯坦比
    sim = Levenshtein.ratio(str1, str2)
    # print('Levenshtein.ratio similarity: ', sim)
    return sim

def CHAR_Levenshtein_jaro(str1, str2):
    # 5.计算jaro距离
    sim = Levenshtein.jaro(str1, str2)
    # print('Levenshtein.jaro similarity: ', sim)
    return sim

def CHAR_Levenshtein_jaro_winkler(str1, str2):
    # 6. Jaro–Winkler距离
    sim = Levenshtein.jaro_winkler(str1, str2)
    # print('Levenshtein.jaro_winkler similarity: ', sim)
    return sim


# print('true')
# str1 = "ratpack_project__fdse__ratpack"
# str2 = "io.ratpack__fdse__ratpack-session"
#
# test(str1 , str2)
#
# print('flse')
# # str1 = "ratpack_project__fdse__ratpack"
# str2 = "io.ratpack__fdse__ratpack-guice"
#
# test(str1 , str2)

def AVG_similary_from_all(str1, str2):
    result1 = CHAR_diff_lib1(str1, str2)
    # CHAR_diff_lib2(str1, str2)
    result2 = CHAR_Levenshtein_distance(str1, str2)
    # CHAR_Levenshtein_hamming(str1, str2)
    result3 = CHAR_Levenshtein_jaro(str1, str2)
    result4 = CHAR_Levenshtein_jaro_winkler(str1, str2)
    result5 = CHAR_Levenshtein_ratio(str1, str2)

    avg_result = (result1 + result2 + result3 + result4 + result5) / 5
    return avg_result

def compare_matched_words(str1, str2):
    """ 传入的str1 , str1分别是: CPE_Vendor_product, or Github_Owner_repo"""
    # 预处理
    # 去除无意义的噪音词： project / python 这种
    # 1. 非字母的内容，当作空格分开
    # 2. lower
    # 去重！
    pass_list = ['project', 'plugin', 'python', 'javascript', 'java', 'android', 'csharp', 'ruby']
    str1 = ''.join(c if c.isalpha() else ' ' for c in str1.lower())
    str2 = ''.join(c if c.isalpha() else ' ' for c in str2.lower())
    for pass_token in pass_list:
        str1 = str1.replace(pass_token,'')
        str2 = str2.replace(pass_token, '')
    str1_list = str1.split(' ')
    str1_list = [ ele for ele in str1_list if len(ele)> 0]
    str1_list = list(set(str1_list))
    str2_list = str2.split(' ')
    str2_list = [ele for ele in str2_list if len(ele) > 0]
    str2_list = list(set(str2_list))

    # matching
    same_word_list = []
    for ele in str1_list:
        if ele in str2_list:
            same_word_list.append(ele)
    # if len(same_word_list) > len(str1_list) / 2 and len(same_word_list) > len(str2_list) / 2:  # 说明命中
    if len(same_word_list) >= len(str1_list) / 2 and len(same_word_list) >= len(str2_list) / 2:  # 说明命中
        return 1
    else:
        return 0
def compare_matched_charaters(str1, str2):
    """
      <cpe-item name="cpe:/a:adminer:adminer:3.6.2">
    <title xml:lang="en-US">Adminer 3.6.2</title>
    <references>
      <reference href="https://www.adminer.org/">Vendor</reference>
      <reference href="https://github.com/vrana/adminer/tags">Version</reference>
    </references>

    """
    pass_list= ['project', 'plugin', 'python' , 'javascript' ,  'java' , 'android' , 'csharp' , 'ruby']
    str1 = ''.join(c if c.isalpha() else '' for c in str1.lower())
    str2 = ''.join(c if c.isalpha() else '' for c in str2.lower())

    for pass_token in pass_list:
        str1 = str1.replace(pass_token,'')
        str2 = str2.replace(pass_token, '')

    return CHAR_Levenshtein_distance(str1, str2)




def main():
    # str1 = "ratpack_project__fdse__ratpack"
    # # str2 = "io.ratpack__fdse__ratpack-guice"
    # str2 = "io.ratpack__fdse__ratpack"
    # print(len(str1) , len(str2))
    #
    # print( CHAR_diff_lib1(str1, str2) )
    # # CHAR_diff_lib2(str1, str2)
    # print( CHAR_Levenshtein_distance(str1, str2) )
    # # CHAR_Levenshtein_hamming(str1, str2)
    # print( CHAR_Levenshtein_jaro(str1, str2) )
    # print( CHAR_Levenshtein_jaro_winkler(str1, str2) )
    # print( CHAR_Levenshtein_ratio(str1, str2) )

    test_cases = [
        ('ratpack_project ratpack', 'ratpack ratpack'),
        ('fedoraproject', 'fedora-infra'),
        ('apache'.lower(), 'guptaparesh'.lower()),
        ('python-glanceclient'.lower(), 'python_glanceclient'.lower()),
        ('python-swiftclient'.lower(), 'python_glanceclient'.lower()),
        ('aws_sdk_for_javascipt' , 'aws-sdk-js' )
    ]
    # for test_case in test_cases:
    #     print( AVG_similary_from_all( test_case[0] , test_case[1] ) , test_case )
    #     # print(CHAR_Levenshtein_distance(test_case[0], test_case[1]), test_case)
    #     print(compare_matched_charaters(test_case[0], test_case[1]), test_case)

    test_case_1 = [ # CVE-2018-17246
        ('fabric8-analytics/cvedb', 'elastic:kibana'),
        ('zhengjim/loophole', 'elastic:kibana'),
        ('ADummmy/vulhub_Writeup', 'elastic:kibana'),
        ('chaitin/xray', 'elastic:kibana'),
        ('elastic/kibana', 'elastic:kibana'),

        ('/cvedb', ':kibana'),
        ('/loophole', ':kibana'),
        ('/vulhub_Writeup', ':kibana'),
        ('/xray', ':kibana'),
        ('/kibana', ':kibana'),

        ('fabric8-analytics/', 'elastic:'),
        ('zhengjim/', 'elastic:'),
        ('xfinest/', 'elastic:'),
        ('ADummmy/', 'elastic:'),
        ('chaitin/', 'elastic:'),
        ('elastic/', 'elastic:'),
    ]
    print('-------------------------CVE-2018-17246')
    for test_case in test_case_1:
        # print( AVG_similary_from_all( test_case[0] , test_case[1] ) , test_case )
        # print(CHAR_Levenshtein_distance(test_case[0], test_case[1]), test_case)
        # print(compare_matched_charaters(test_case[0], test_case[1]), test_case)
        print(compare_matched_words(test_case[0], test_case[1]), test_case)

    # /django/django/
    test_case_1 = [  #CVE-2018-16984
        ('fabric8-analytics/cvedb', 'djangoproject:django'),
        ('OlafSzmidt/attendance-arduino', 'djangoproject:django'),
        ('youben11/open-class', 'djangoproject:django'),
        ('bersegosx/geo_tasty', 'djangoproject:django'),
        ('Califun/kwikwiter', 'djangoproject:django'),
        ('collinmutembei/III', 'djangoproject:django'),
        ('onlySlient/hzj_django', 'djangoproject:django'),
        ('abida1234/djang', 'djangoproject:django'),
        ('ymaahi/all-django-', 'djangoproject:django'),
        ('django/django', 'djangoproject:django'),

        ('/cvedb', ':django'),
        ('/attendance-arduino', ':django'),
        ('/open-class', ':django'),
        ('/geo_tasty', ':django'),
        ('/kwikwiter', ':django'),
        ('/III', ':django'),
        ('/hzj_django', ':django'),
        ('/djang', ':django'),
        ('/all-django-', ':django'),
        ('/django', ':django'),

        ('fabric8-analytics/', 'djangoproject:'),
        ('OlafSzmidt/', 'djangoproject:'),
        ('youben11/-', 'djangoproject:'),
        ('bersegosx/', 'djangoproject:'),
        ('Califun/', 'djangoproject:'),
        ('collinmutembei/', 'djangoproject:'),
        ('onlySlient/', 'djangoproject:'),
        ('abida1234/', 'djangoproject:'),
        ('ymaahi/--', 'djangoproject:'),
        ('django/', 'djangoproject:'),
    ]
    print('-------------------------CVE-2018-16984')
    for test_case in test_case_1:
        # print( AVG_similary_from_all( test_case[0] , test_case[1] ) , test_case )
        # print(CHAR_Levenshtein_distance(test_case[0], test_case[1]), test_case)
        # print(compare_matched_charaters(test_case[0], test_case[1]), test_case)
        print(compare_matched_words(test_case[0], test_case[1]), test_case)

    test_case_1 = [ # chef/chef
        ('chef/chef-workstation', 'opscode:chef'),
        ('danielsdeleo/seth', 'opscode:chef'),
        ('IrArch77/ChefConnect', 'opscode:chef'),
        ('ajayhadoop/awstask', 'opscode:chef'),
        ('b-itien/chef_proj', 'opscode:chef'),
        ('deepavaliing/chef-repo', 'opscode:chef'),
        ('chef/chef', 'opscode:chef'),

        ('chef/', 'opscode:'),
        ('danielsdeleo/', 'opscode:'),
        ('IrArch77/', 'opscode:'),
        ('ajayhadoop/', 'opscode:'),
        ('b-itien/', 'opscode:'),
        ('deepavaliing/', 'opscode:'),
        ('chef/', 'opscode:'),

        ('/chef-workstation', ':chef'),
        ('/seth', ':chef'),
        ('/ChefConnect', ':chef'),
        ('/awstask', ':chef'),
        ('b-/chef_proj', ':chef'),
        ('/chef-repo', ':chef'),
        ('/chef', ':chef'),
    ]
    print('-------------------------CVE-2010-5142 (1280issuekey)')
    for test_case in test_case_1:
        # print( AVG_similary_from_all( test_case[0] , test_case[1] ) , test_case )
        # print(CHAR_Levenshtein_distance(test_case[0], test_case[1]), test_case)
        # print(compare_matched_charaters(test_case[0], test_case[1]), test_case)
        print(compare_matched_words(test_case[0], test_case[1]), test_case)
        #


if __name__ == '__main__':
    main()
    # print( compare_matched_words('chef/chef', 'opscode:chef')  )
    # print(AVG_similary_from_all('ratpack_project__fdse__ratpack', 'ratpack__fdse__ratpack'))
    # print( AVG_similary_from_all('fedoraproject' , 'fedora-infra') )
    # print(AVG_similary_from_all('apache'.lower(), 'guptaparesh'.lower()))
    # print(AVG_similary_from_all('python-glanceclient'.lower(), 'python_glanceclient'.lower()))
    # print(AVG_similary_from_all('python-swiftclient'.lower(), 'python_glanceclient'.lower())) # 难啊


"""
PJ: 0.83 0.63 0.95
Ow: 0.64

0.7008
0.31
0.36
0.27
0.22
0.19
"""


"""
30 31
0.7213114754098361
0.4516129032258065
0.7199283154121864
0.7199283154121864
0.7213114754098361

0.8
0.6333333333333333
0.736135265700483
0.736135265700483
0.8
"""