
#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
-----------------------------------------
@Created: 2020/09/14
------------------------------------------
@Modify: 2020/09/14
------------------------------------------
@Description:
用于实现NVD相关功能
 - 查询某个CVE数据

"""


import os, sys, inspect
current_dir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
parent_dir = os.path.dirname(current_dir)
sys.path.insert(0, parent_dir)
sys.path.append('../../')
sys.path.append('../../..')
import urllib.parse
import logging

from vulnerability_analysis import config
from vulnerability_analysis.utility import json_processing, item_template, file_processing, log

l1_split_str = config.L1_SPLITE_STR
l2_split_str = config.L2_SPLITE_STR
cve_dataset_path = config.CVE_DATASET_PATH
NVD_dataset_items_dir = config.NVD_DATASET_ITEMS_DIR
NVD_CPErange_items_dir = config.NVD_CPERANGE_ITEMS_DIR
DR008_presented_metadata_field_list = config.DR008_PRESENTED_METADTA_LIST
logger = log.create_logger(logging.INFO, config.LOG_NVD_UTIL, 'NVD_util')

def query_dataset(CVEID, dataset = 'NVD'):
    if dataset == 'NVD':
        item_path = NVD_dataset_items_dir + CVEID + '.json'
        if file_processing.pathExist(item_path):
            CVE_item_content = json_processing.read(item_path)
            return CVE_item_content
        else:
            print("CVEID:", CVEID , "is not in database!")
            return None
    else:
        pass

def extract_NVD_metadata(CVE_item_content):
    NVDItem = item_template.CVEItem()
    Item_data = CVE_item_content
    CVEID = CVE_item_content['cve']['CVE_data_meta']['ID']

    NVDItem.CVEID = CVEID
    NVDItem.Description = Item_data['cve']['description']['description_data'][0]['value']
    # NVDItem.Reference =   sorted( [ ele['url']  for ele in Item_data['cve']['references']['reference_data'] ] )

    ReferenceList = []
    OVALList = []
    for ele in Item_data['cve']['references']['reference_data']:
        url = urllib.parse.unquote(urllib.parse.unquote(ele['url'])).replace('&amp;', '&')
        src = ele['url']
        name = ele['name']
        if 'tags' in ele.keys():
            tags = ele['tags']
        else:
            tags = []
        tags_str = ''
        for tag in tags:
            tags_str += tag + l2_split_str
        tags_str = tags_str.strip(l2_split_str)

        if '/oval.' in url or src == 'OVAL':
            OVALList.append(name)
        else:
            ReferenceList.append(url +l1_split_str + tags_str)

    NVDItem.Reference = sorted(list(set(ReferenceList)))
    NVDItem.OvalDefinition = sorted(list(set(OVALList)))

    if len(NVDItem.Reference) == 0:
        NVDItem.Reference = None
    if len(NVDItem.OvalDefinition) == 0:
        NVDItem.OvalDefinition = None

    # NVDItem.CVSS2 = ''
    # NVDItem.CVSS3 = ''
    # NVDItem.CVSS2Vector = ''
    # NVDItem.CVSS3Vector = ''
    if 'baseMetricV2' in Item_data['impact'].keys():
        NVDItem.CVSS2 = str(Item_data['impact']['baseMetricV2']['cvssV2']['baseScore'])
        NVDItem.CVSS2Vector = Item_data['impact']['baseMetricV2']['cvssV2']['vectorString']
    else:
        NVDItem.CVSS2 = None
        NVDItem.CVSS2Vector = None
    if 'baseMetricV3' in Item_data['impact'].keys():
        NVDItem.CVSS3 = str(Item_data['impact']['baseMetricV3']['cvssV3']['baseScore'])
        NVDItem.CVSS3Vector = Item_data['impact']['baseMetricV3']['cvssV3']['vectorString']
    else:
        NVDItem.CVSS3 = None
        NVDItem.CVSS3Vector = None

    # NVDItem.CWE = ''
    # NVDItem.AffectedVendorProductCPE = []
    # NVDItem.AffectedVendorProductVersionCPE = []
    try:
        NVDItem.CWE = Item_data['cve']['problemtype']['problemtype_data'][0]['description'][0]['value']
    except IndexError:
        NVDItem.CWE = None
    if NVDItem.CWE == 'NVD-CWE-noinfo' or NVDItem.CWE == 'NVD-CWE-Other':
        NVDItem.CWE = None

    VP_list = []
    for node in Item_data['configurations']['nodes']:
        operation = node['operator']
        # print(operation)
        if 'children' in node.keys() and node['children']:
            children = node['children']
            for ele in children:
                if not 'cpe_match' in ele.keys(): continue
                cpe_match = ele['cpe_match']
                for cpe_match_ele in cpe_match:
                    if cpe_match_ele['vulnerable']:
                        cpe = cpe_match_ele['cpe23Uri'].split(':')[3] + '__fdse__' + \
                              cpe_match_ele['cpe23Uri'].split(':')[4]
                        VP_list.append(cpe.replace('\\', '').strip('_'))
        else:
            if not 'cpe_match' in node.keys(): continue
            cpe_match = node['cpe_match']
            for cpe_match_ele in cpe_match:
                if cpe_match_ele['vulnerable']:
                    cpe = cpe_match_ele['cpe23Uri'].split(':')[3] + '__fdse__' + cpe_match_ele['cpe23Uri'].split(':')[4]
                    VP_list.append(cpe.replace('\\', '').strip('_'))
    NVDItem.AffectedVendorProductCPE = sorted(set(VP_list))
    if len(NVDItem.AffectedVendorProductCPE) == 0:
        NVDItem.AffectedVendorProductCPE = None

    # NVDItem.AffectedVendorProductVersionCPE = []
    VPV_record_list = []
    CpeRange_item_path = NVD_CPErange_items_dir + CVEID + '.json'
    # print('os.path.exists(CpeRange_item_path)', os.path.exists(CpeRange_item_path),CpeRange_item_path )
    if os.path.exists(CpeRange_item_path):
        CpeRange_item_info = json_processing.read(CpeRange_item_path)
        for config in CpeRange_item_info.keys():
            config_info = CpeRange_item_info[config]
            if 'vulnerable' in config_info.keys():
                vuln_config_info = config_info['vulnerable']
                NVDItem.tag_ANDOR = False
            else:  ### AND OR 未处理
                NVDItem.tag_ANDOR = True
                continue
            for record in vuln_config_info:
                for VP_key in record.keys():
                    if ':' not in VP_key or ':*' not in VP_key:  # 说明是： Up to (including)1.5， 这类信息
                        NVDItem.tag_CpeRange = True
                        continue
                    V = VP_key.split(':')[3].strip(' ').lower().replace(' ', '_').strip('.0').replace('\\', '').strip(
                        '_')
                    P = VP_key.split(':')[4].strip(' ').lower().replace(' ', '_').strip('.0').replace('\\', '').strip(
                        '_')
                    Version = VP_key.split(':')[5].strip(' ').lower().replace(' ', '_').replace('\\', '')
                    VPV_record = V + "__fdse__" + P + "__fdse__" + Version
                    if '*' not in VPV_record and Version != '-' and len(Version) > 0:
                        VPV_record_list.append(VPV_record)

                    for VPV_ele in record[VP_key]:
                        V = VPV_ele.split(':')[3].strip(' ').lower().replace(' ', '_').strip('.0').replace('\\',
                                                                                                           '').strip(
                            '_')
                        P = VPV_ele.split(':')[4].strip(' ').lower().replace(' ', '_').strip('.0').replace('\\',
                                                                                                           '').strip(
                            '_')
                        Version = VPV_ele.split(':')[5].strip(' ').lower().replace(' ', '_').replace('\\',
                                                                                                                 '')
                        VPV_record = V + "__fdse__" + P + "__fdse__" + Version
                        if '*' not in VPV_record and Version != '-' and len(Version) > 0:
                            VPV_record_list.append(VPV_record)

        NVDItem.AffectedVendorProductVersionCPE = sorted(list(set(VPV_record_list)))

        if len(NVDItem.AffectedVendorProductVersionCPE) == 0:
            NVDItem.AffectedVendorProductVersionCPE = None
    else:
        NVDItem.AffectedVendorProductVersionCPE = None
        # print(CVEID, "To check: NVDItem.AffectedVendorProductVersionCPE = None")
        logger.debug( CVEID.__str__()  +  ", To check: NVDItem.AffectedVendorProductVersionCPE = None" )

    # self.PublishedData = ''
    # self.LastModifiedDate = ''
    NVDItem.PublishedData = Item_data['publishedDate']
    NVDItem.LastModifiedDate = Item_data['lastModifiedDate']

    return NVDItem.to_dict()

def main_no_present(input_CVEID):
    full_CVE_item_content = query_dataset(input_CVEID, 'NVD')
    extracted_item_content = {}
    if full_CVE_item_content: # full_CVE_item_content 不为空
        extracted_item_content = extract_NVD_metadata(full_CVE_item_content)
    return extracted_item_content


### get CVE list
def get_CVE_list():
    res = file_processing.walk_L1_FileNames(config.NVD_DATASET_ITEMS_DIR)
    return [r[:-5] for r in res if r[:4] == 'CVE-' and r[-5:] == '.json']


def get_VP_list(input_CVEID):
    CVE_item_content = main_no_present(input_CVEID)
    if CVE_item_content == {}:
        VP = []
    else:
        VP = CVE_item_content['AffectedVendorProductCPE']
    return VP

def update_CVEID_list():
    NVD_CVEID_LIST = get_CVE_list()
    json_processing.write( json_content=NVD_CVEID_LIST , path=config.NVD_CVEID_LIST_PATH  )

if __name__ == '__main__':
    # update_CVEID_list()
    main_no_present(input_CVEID='CVE-2017-16026')