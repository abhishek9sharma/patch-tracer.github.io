#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
-----------------------------------------
@Created: 2020/09/03
------------------------------------------
@Modify: 2020/09/03
------------------------------------------
@Description:

用于解析patch信息
 - git commit -> file path\name\diff\func
 - diff/patch file -> file path\name\diff\func

 ...
"""

# @宸昊 （@宇晗）
# git commit -> file path\name\diff\func
# 输入：commit url
# 输出：commitID.json  { 'commit_ID': commitID_value ,'parent_ID':[] , commitID_value: { file_path:{'name': '' , 'diff': '' , 'function':[{'added':[]},{'modified':[]},{'deleted':[]}],'fullpath':'','status':'' } }
# 数据存储：0
#   1. request的原数据 output/DR010/parse_patch/git_commits_meta/raw/38b7c9743798e274709114ec16f30030ed625826.json
#   2. 解析后的数据，即commitID.json。存储 output/DR010/parse_patch/git_commits_meta/processed/38b7c9743798e274709114ec16f30030ed625826.json
# 除了function列表中的内容需要另外解析，processed/json中的其他部分都可以由raw/json中获得
# function列表中的算法主要思路为解析raw/json中的'patch'部分，用每种语言特有的函数定义语法做字符串匹配，对于java/C/C++，需要去掉噪声
# 找到所有函数后，再根据其声明行前的符号分为added,modified,deleted三类，如果行前符号为'+'则为added,'-'则为deleted,其余则为modified
import os, sys, inspect

current_dir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
parent_dir = os.path.dirname(current_dir)
sys.path.insert(0, parent_dir)
sys.path.append('../')
sys.path.append('../..')
sys.path.append('../../..')

import json
import logging
import time
import requests
import re
from bs4 import BeautifulSoup

from vulnerability_analysis.utility.crawler import crawl_util
from vulnerability_analysis.utility import file_processing, log, json_processing, github_util, re_util
from vulnerability_analysis import config

logger = log.create_logger(logging.DEBUG, config.LOG_CRAWLING_REDHAT_ADVISORIES_PATH, 'crawling_issue_list')
# 每种语言特有的函数命名格式，python,js,go都为简单的关键词声明(def,function,func)
# 对于java/C/C++，声明函数总是需要) *** {，***部分可能为空格，也可能为catch exception语句，因此此处用正则表达式处理
# 这种格式在if语句，for循环，catch模块中也可能出现，因此要作为噪声去除
python_function_pattern = re.compile('def')
javascript_function_pattern = re.compile('function')
go_function_pattern = re.compile('func')
java_function_pattern = re.compile(r'\)(.*?){')
java_function_distraction_pattern = re.compile('if|for|catch|->|while')


def main():
    # get_commit_diff(
    # 'https://github.com/apache/hadoop/commit/3067a25fa12a012709f43aa35cc606db6fb137f9')
    # get_commit_diff(
    #     'https://github.com/apache/hadoop/commit/641d8856d203fc74aac587140a04b0efd5597fc3')
    res = get_commit_diff('https://github.com/eclipse-vertx/vert.x/commit/1bb6445226c39a95e7d07ce3caaf56828e8aab72')
    print(res)
    url = 'https://github.com/apache/hadoop/commit/641d8856d203fc74aac587140a04b0efd5597fc3'
    res = get_commit_metadata(url)
    print(res)


# 获取commit的基本信息
def get_commit_metadata(url):
    separate_url_list = url.split("/")
    if len(separate_url_list) < 7: return None
    owner = separate_url_list[3]
    repo = separate_url_list[4]
    commitID = re_util.extract_commitid_in_commit_url(url)
    if not commitID or len(commitID) < 6: return False
    # 调用方法，得到raw/json
    github_api_commit_json = github_util.request_specific_commit(owner, repo, commitID)
    return github_api_commit_json

def get_commit_diff(url):
    """

    :param url: github的commit url
    :return:
    """
    # print('get_commit_diff: ', url)
    # 将url用/分割，得到owner,repo,commitID，一般来说，分别为list的第4,5,7项
    separate_url_list = url.split("/")
    if len(separate_url_list) < 7: return None
    owner = separate_url_list[3]
    repo = separate_url_list[4]
    commitID = re_util.extract_commitid_in_commit_url(url)
    if not commitID or len(commitID) < 6: return None # 无效commitID
    # 调用方法，得到raw/json
    github_api_commit_json = github_util.request_specific_commit(owner, repo, commitID)
    # 考虑url不存在的情况，不存在则直接返回False
    if github_api_commit_json:
        # 获取存储路径，文件名即为commitID
        raw_commit_path = config.DR010_GIT_COMMITS_META_RAW_DIR + commitID + ".json"
        json_processing.write(github_api_commit_json, raw_commit_path)
        processed_json = {}
        # 存储commitID（通过url得到）
        processed_json["commit_ID"] = commitID
        processed_json["html_url"] = github_api_commit_json['html_url']
        # date_day = github_api_commit_json['commit']['committer']['date'].split('T')[0] + 'T'
        date = github_api_commit_json['commit']['committer']['date']
        processed_json["date"] = date
        parentID = []
        # parentID来自raw/json中的parents列表，其中的'sha'值即为parent的commitID
        for item in github_api_commit_json["parents"]:
            id = item["sha"]
            parentID.append(id)
        processed_json["parent_ID"] = parentID
        processed_json[commitID] = {}
        for item in github_api_commit_json["files"]:
            json_of_specific_file = {}
            # 从raw/json的同名部分中获得filename,status，diff即为patch，fullpath可以从contents_url中截取
            filename = item["filename"]
            diff = None
            function = None
            status = item["status"]
            # fullpath从repo开始，并且去掉最后的ref=部分
            fullpath = item["contents_url"].split("?")[0].split("/")[5:]
            # 由于可能没有'patch'，先做一个判断，如果没有那么diff和function就都是null了
            if "patch" in item.keys():
                diff = item["patch"]
                # 调用get_function方法，得到和本次commit有关的函数名，并做added,modified,deleted的分类
                function = get_function(item)
            json_of_specific_file["filename"] = filename.split("/")[-1]
            json_of_specific_file["diff"] = diff
            json_of_specific_file["function"] = function
            json_of_specific_file["full_path_in_project"] = ("/".join(fullpath)).replace('contents/', '')
            json_of_specific_file["status"] = status
            json_of_specific_file["full_path_in_url"] = item["contents_url"]
            processed_json[commitID][filename] = json_of_specific_file
        # 获取写入路径，文件名为commitID
        processed_json["patch_type"]="github commit"
        processed_commit_path = config.DR010_GIT_COMMITS_META_PROCESSED_DIR + commitID + ".json"
        json_processing.write(processed_json, processed_commit_path)
        return processed_json
    return github_api_commit_json


def get_function(item):
    """
    :param item: 单个文件的commit信息
    :return: 该次commit中修改的函数名，list类型
    """
    diff = item["patch"]
    diff = diff.replace("\t", "")
    diff_list = diff.split("\n")
    function_list = []
    filename = item["filename"].split("/")[-1]
    # 获取文件的后缀名，根据后缀名的不同分别处理，而如果不是java,C/C++,go,js,python中的任何一种，则直接不解析，返回一个null
    filetype = filename.split(".")[-1]
    added = []
    modified = []
    deleted = []
    # 对于python,js,go而言，没有噪声，情况比较简单
    if filetype == "py":
        function_list = get_function_list(diff_list, python_function_pattern)
    elif filetype == "js":
        function_list = get_function_list(diff_list, javascript_function_pattern)
    elif filetype == "go":
        function_list = get_function_list(diff_list, go_function_pattern)
    # 对于java,C/C++而言，存在噪声，因此需要同时满足两个条件才能认定为是一个函数声明
    elif filetype == "java" or filetype == "c" or filetype == "cc":
        function_list = get_function_list_with_distraction(diff_list, java_function_pattern,
                                                           java_function_distraction_pattern)
    # 如果不是五种语言的任何一种，则直接返回一个None
    else:
        return None
    # 将获得的函数名分类，added,modified,deleted三类，根据其声明行前的符号分为added,modified,deleted三类，如果行前符号为'+'则为added,'-'则为deleted,其余则为modified
    for function in function_list:
        modified.append(function)
    for function in function_list:
        for line in diff_list:
            if function in line:
                if line.startswith("-") and line[1:].strip().startswith(function):
                    deleted.append(function)
                    modified.remove(function)
                    break
                elif line.startswith("+") and line[1:].strip().startswith(function):
                    added.append(function)
                    modified.remove(function)
                    break
    function_list = [{"added": added if added != [] else None}, {"modified": modified if modified != [] else None},
                     {"deleted": deleted if deleted != [] else None}]
    return function_list


# 下面两个函数的逻辑是相同的，只是判断是否为函数声明时的步骤不同，我暂时还没有想到合并的好方法
def get_function_list(diff_list, pattern):
    function_list = []
    for i in range(len(diff_list)):
        function_name = ""
        # 对于所有有'+'或者'-'的行，做一次函数声明的判断
        if diff_list[i].startswith("+") or diff_list[i].startswith("-"):
            if re.search(pattern, diff_list[i]) is not None:
                function_name = diff_list[i][1:-1].strip()
        # 对于省略的部分，首先排除其为空函数(and后的部分)
        if diff_list[i].startswith("@") and "{}" not in diff_list[i]:
            delete_function_index = 0
            # 省略行可能有函数名，然而这个函数名并不总是准确的
            if re.search(pattern, diff_list[i]) is not None:
                index = diff_list[i].rfind('@')
                function_name = diff_list[i][index + 1:-1].strip()
            # 情况一：如果之后的三行未修改行中有新的函数定义，则需要改为最后一个定义的函数
            for line in diff_list[i + 1:i + 4]:
                if re.search(pattern, line) is not None:
                    index = line.rfind('@')
                    function_name = line[index + 1:-1].strip()
            # 情况二：声明的函数的修改只是加减几个括号，并不产生实质的影响，这时不应该加入
            # 处理方法为，考虑删除行中第一个新的函数定义，如果在那之前所有的行都只是括号，那么之前所查找的函数就没有被实际修改过，应该舍去
            # 找到删除行中第一个新的函数定义的所在行
            for j in range(len(diff_list[i + 5:])):
                if diff_list[i + 5:][j].startswith("-") is True and re.search(pattern,
                                                                              diff_list[i + 5:][j]) is not None:
                    delete_function_index = i + j + 5
                    break
                if diff_list[i + 5:][j].startswith("-") is False:
                    delete_function_index = i + j + 5
                    break
            # 查看之前的所有行是否都是括号，如果是，则本次循环不加入新的函数
            for j in range(len(diff_list[i + 4:delete_function_index])):
                if diff_list[i + 4:delete_function_index][j][1:].strip() != "}":
                    break
                if j == delete_function_index - i - 5:
                    function_name = ""
        if function_name != "":
            function_list.append(function_name)
    return function_list


def get_function_list_with_distraction(diff_list, pattern, distraction_pattern):
    function_list = []
    for j in range(len(diff_list)):
        if diff_list[j][1:].strip().startswith("{"):
            diff_list[j - 1] = diff_list[j - 1] + "{"
            diff_list[j] = diff_list[j].replace("{", " ")
    for item in diff_list:
        if item.strip() == "":
            diff_list.remove(item)
    for j in range(len(diff_list)):
        if diff_list[j][1:].strip().startswith("throws"):
            diff_list[j - 1] = diff_list[j - 1] + diff_list[j][1:].strip()
            diff_list[j] = " "
    for j in range(len(diff_list)):
        if diff_list[j][1:].strip().endswith(",") and j != len(diff_list) - 1:
            diff_list[j] = diff_list[j] + diff_list[j + 1][1:].strip()
            diff_list[j + 1] = " "
    for item in diff_list:
        if item.strip() == "":
            diff_list.remove(item)
    for i in range(len(diff_list)):
        function_name = ""
        if diff_list[i].startswith("+") or diff_list[i].startswith("-"):
            if re.search(pattern, diff_list[i]) is not None:
                if re.search(distraction_pattern, diff_list[i]) is None:
                    function_name = diff_list[i][1:-1].strip()
        if diff_list[i].startswith("@"):
            delete_function_index = 0
            if re.search(pattern, diff_list[i]) is not None:
                if re.search(distraction_pattern, diff_list[i]) is None:
                    if "{}" not in diff_list[i]:
                        index = diff_list[i].rfind('@@')
                        function_name = diff_list[i][index + 2:-1].strip()
            for line in diff_list[i + 1:i + 4]:
                if re.search(pattern, line) is not None:
                    if re.search(distraction_pattern, line) is None:
                        index = line.rfind('@@')
                        function_name = line[index + 2:-1].strip()
            for j in range(len(diff_list[i + 5:])):
                if diff_list[i + 5:][j].startswith("-") is True and re.search(pattern, diff_list[i + 5:][
                    j]) is not None and re.search(
                    distraction_pattern, diff_list[i + 5:][j]) is None:
                    delete_function_index = i + j + 5
                    break
                if diff_list[i + 5:][j].startswith("-") is False:
                    delete_function_index = i + j + 5
                    break
            for j in range(len(diff_list[i + 4:delete_function_index])):
                if diff_list[i + 4:delete_function_index][j][1:].strip() != "}":
                    break
                if j == delete_function_index - i - 5:
                    function_name = ""
        if function_name != "":
            function_list.append(function_name)
    # for item in function_list:
    #     if item.startswith("+" or "-"):
    #         item=item[1:].strip()
    return list(set(function_list))


if __name__ == '__main__':
    # main()
    url = 'https://github.com/thorsten/phpMyFAQ/commit/867618110feb836e168435548d6c2cbb7c65eda3'
    url = 'https://github.com/thorsten/phpMyFAQ/commit/867618110feb836e168435548d6c2cbb7c65eda3'
    print(url)
    print( get_commit_metadata(url=url) )