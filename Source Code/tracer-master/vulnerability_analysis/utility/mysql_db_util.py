#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
-----------------------------------------
@Created: 2020/12/11
------------------------------------------
@Modify: 2020/12/11
------------------------------------------
@Description:
"""
import os
import sys
import traceback
from typing import Union, List, Optional

import mysql.connector
from mysql.connector import MySQLConnection
from mysql.connector.pooling import PooledMySQLConnection

_PROJECT_NAME = 'VulnerabilityAnalysis'
_CURRENT_ABSPATH = os.path.abspath(__file__)
sys.path.insert(0, _CURRENT_ABSPATH[:_CURRENT_ABSPATH.find(_PROJECT_NAME) + len(_PROJECT_NAME) + 1])

from vulnerability_analysis import privacy


def connect(new_connect: bool = False) -> Union[MySQLConnection, PooledMySQLConnection]:
    """
    连接服务器.
    :param new_connect: 是否重新连接
    :return: MySQL 连接
    """
    global __connection
    if new_connect: __connection = mysql.connector.connect(**privacy.MYSQL_SERVER_KWARGS)
    return __connection


def query(sql: str, val: Union[tuple, list] = (), new_connect: bool = False) -> Optional[List[tuple]]:
    """
    根据 SQL 语句查询结果. 传入 val 的字符串会被自动转义.
    val 参数使用样例: sql = ‘UPDATE oss.pypi_pkg SET raw=%s WHERE name=%s;’; val = ("'\n\r", '"\n\r').
    :param sql: MySQL 查询语句
    :param val: 查询语句 参数
    :param new_connect: 是否强制建立新连接
    :return: 查询到的所有结果 (行)
    """
    res: Optional[List[tuple]] = None
    try:
        cursor = connect(new_connect).cursor()
        if type(val) is tuple: cursor.execute(sql, val)
        else: cursor.executemany(sql, val)
        try: res = cursor.fetchall()
        except mysql.connector.errors.InterfaceError: res = None
        cursor.close()
    except mysql.connector.errors.OperationalError as ex:
        if new_connect: raise ex
        print('Connection timeout. Retrying...')
        res = query(sql, val, True)
    return res


def commit():
    """
    INSERT, UPDATE 与 DELETE 操作之后务必 commit, 否则数据库不会更新.
    :return: 无.
    """
    connect(False).commit()


# 一些初始化
__connection = None
connect(True)


if __name__ == '__main__':
    print(query("select * from oss.pypi_pkg;"))
