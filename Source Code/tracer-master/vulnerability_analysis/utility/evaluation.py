#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
-----------------------------------------
@Created: 2020/07/26
------------------------------------------
@Modify: 2020/07/26
------------------------------------------
@Description:
"""

from vulnerability_analysis import config
from vulnerability_analysis.utility import log
import logging

_default_logger = log.create_logger(logging.DEBUG, config.LOG_FILE_PATH, 'retrieve_CVE')


def calculate_from_tp_fp_fn_tn(tp: int, fp: int, fn: int, tn: int):
    """根据 TP、FP、FN、TN 计算 Precision、Recall、Accuracy、Error Rate、F1 Score"""
    precision = tp / (tp + fp) if tp + fp != 0 else 0
    recall = tp / (tp + fn)
    accuracy = (tp + tn) / (tp + fp + tn + fn)
    error_rate = (fn + fp) / (tp + fp + tn + fn)
    f1_score = 2 * precision * recall / (precision + recall) if precision + recall != 0 else 0
    return precision, recall, accuracy, error_rate, f1_score


def calculate_precision_recall_accuracy_error_f1(predict_list, expect_list, logger=_default_logger):
    """返回 TP、FP、FN、TN、Precision、Recall、Accuracy、Error Rate、F1 Score"""
    #       \ Expect |          1          |          0          |
    # Predict \      |                     |                     |
    #        1       | True Positive (TP)  | False Positive (FP) |
    #        0       | False Negative (FN) | True Negative (TN)  |

    tp, fp, fn, tn = [0] * 4
    # 既在期望列表里又在预测列表里为TP
    for predict_element in predict_list:
        if predict_element in expect_list: tp += 1
    fp = len(predict_list) - tp
    fn = len(expect_list) - tp

    try:
        precision, recall, accuracy, error_rate, f1_score = calculate_from_tp_fp_fn_tn(tp, fp, fn, tn)
    except:
        precision, recall, accuracy, error_rate, f1_score = [0.0] * 5

    # logger.info("actual list:"+actual_list)
    # logger.info("expect list:"+expect_list)
    if logger is not None:
        logger.info("TP: %d, FP: %d, FN: %d, TN: %d" % (tp, fp, fn, tn))
        logger.info("precision:  %f" % precision)
        logger.info("recall:     %f" % recall)
        logger.info("accuracy:   %f" % accuracy)
        logger.info("error rate: %f" % error_rate)
        logger.info("F1 score:   %f" % f1_score)
    return tp, fp, fn, tn, precision, recall, accuracy, error_rate, f1_score


# measures: precision / recall ...
def calculate_mean_of_measures(measure_list):
    if len(measure_list) == 0:
        return None
    else:
        sum_value = sum(measure_list)
        return sum_value / len(measure_list)